// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"libs/resources/database/in-memory/go-doc-db-client/client"
	"libs/services/entities/exchange-rate/entity"
	"libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/repository"
	"libs/services/infrastructure/server/http/handlers/exchange-rate"
	"libs/services/infrastructure/server/http/handlers/health-check"
)

// Injectors from wire.go:

func NewWebServiceExchangeRateHandler(client2 *client.Client, databaseName string) *handlers.WebServiceExchangeRateHandler {
	exchangeRateRepository := godocdbrepository.NewExchangeRateRepository(databaseName, client2)
	webServiceExchangeRateHandler := handlers.NewWebServiceExchangeRateHandler(exchangeRateRepository)
	return webServiceExchangeRateHandler
}

func NewHealthzHandler() *healthcheckhandler.WebHealthzHandler {
	webHealthzHandler := healthcheckhandler.NewWebHealthzHandler()
	return webHealthzHandler
}

// wire.go:

var setExchangeRateRepositoryDependency = wire.NewSet(godocdbrepository.NewExchangeRateRepository, wire.Bind(
	new(exchangerateentity.ExchangeRateRepositoryInterface),
	new(*godocdbrepository.ExchangeRateRepository),
),
)
