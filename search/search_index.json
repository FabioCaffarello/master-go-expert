{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"summary/","title":"Summary","text":"<ul> <li>Architecture</li> <li>Services</li> <li>Libraries</li> <li>Chalanges</li> <li>Dependency Graph</li> </ul>"},{"location":"reference/chalanges/client-server-api/","title":"Test","text":"<p>Ol\u00e1 dev, tudo bem?</p> <p>Neste desafio vamos aplicar o que aprendemos sobre webserver http, contextos, banco de dados e manipula\u00e7\u00e3o de arquivos com Go.</p> <p>Voc\u00ea precisar\u00e1 nos entregar dois sistemas em Go: - client.go - server.go</p> <p>Os requisitos para cumprir este desafio s\u00e3o:</p> <p>O client.go dever\u00e1 realizar uma requisi\u00e7\u00e3o HTTP no server.go solicitando a cota\u00e7\u00e3o do d\u00f3lar.</p> <p>O server.go dever\u00e1 consumir a API contendo o c\u00e2mbio de D\u00f3lar e Real no endere\u00e7o: https://economia.awesomeapi.com.br/json/last/USD-BRL e em seguida dever\u00e1 retornar no formato JSON o resultado para o cliente.</p> <p>Usando o package \"context\", o server.go dever\u00e1 registrar no banco de dados SQLite cada cota\u00e7\u00e3o recebida, sendo que o timeout m\u00e1ximo para chamar a API de cota\u00e7\u00e3o do d\u00f3lar dever\u00e1 ser de 200ms e o timeout m\u00e1ximo para conseguir persistir os dados no banco dever\u00e1 ser de 10ms.</p> <p>O client.go precisar\u00e1 receber do server.go apenas o valor atual do c\u00e2mbio (campo \"bid\" do JSON). Utilizando o package \"context\", o client.go ter\u00e1 um timeout m\u00e1ximo de 300ms para receber o resultado do server.go.</p> <p>Os 3 contextos dever\u00e3o retornar erro nos logs caso o tempo de execu\u00e7\u00e3o seja insuficiente.</p> <p>O client.go ter\u00e1 que salvar a cota\u00e7\u00e3o atual em um arquivo \"cotacao.txt\" no formato: D\u00f3lar: {valor}</p> <p>O endpoint necess\u00e1rio gerado pelo server.go para este desafio ser\u00e1: /cotacao e a porta a ser utilizada pelo servidor HTTP ser\u00e1 a 8080.</p> <p>Ao finalizar, envie o link do reposit\u00f3rio para corre\u00e7\u00e3o.</p>"},{"location":"reference/chalanges/client-server-api/chalange-client/","title":"TEST DOC 3","text":""},{"location":"reference/chalanges/client-server-api/chalange-server/","title":"TEST DOC 3","text":""},{"location":"reference/libs/external-clients/economia-awesome-api/","title":"Economia Awesome API Client","text":"<p>The <code>eonomia-awesome-api</code> library provides a client for fetching exchange rate data from the Economia Awesome API.</p>"},{"location":"reference/libs/external-clients/economia-awesome-api/#overview","title":"Overview","text":"<p>The <code>client</code> package includes the following main components: - <code>Client</code>: A struct that provides methods to interact with the Economia Awesome API.</p>"},{"location":"reference/libs/external-clients/economia-awesome-api/#features","title":"Features","text":"<p>The main functionalities provided by the package include: - Fetching exchange rate data from the Economia Awesome API.</p>"},{"location":"reference/libs/external-clients/economia-awesome-api/#types","title":"Types","text":"<ul> <li>Client: Represents a client for the Economia Awesome API.</li> </ul>"},{"location":"reference/libs/external-clients/economia-awesome-api/#functions","title":"Functions","text":""},{"location":"reference/libs/external-clients/economia-awesome-api/#client-functions","title":"Client Functions","text":"<ul> <li><code>NewClient() *Client</code>: Creates and returns a new <code>Client</code> instance with default settings.</li> <li><code>GetExchangeRate(exchangeRateName string) (outputDTO.CurrencyInfoMapDTO, error)</code>: Fetches the exchange rate for the given <code>exchangeRateName</code> from the Economia Awesome API.</li> </ul>"},{"location":"reference/libs/external-clients/economia-awesome-api/#usage","title":"Usage","text":""},{"location":"reference/libs/external-clients/economia-awesome-api/#creating-a-new-client","title":"Creating a New Client","text":"<pre><code>client := client.NewClient()\n</code></pre>"},{"location":"reference/libs/external-clients/economia-awesome-api/#fetching-exchange-rate-data","title":"Fetching Exchange Rate Data","text":"<pre><code>exchangeRateName := \"USD-BRL\"\n\nexchangeRateData, err := client.GetExchangeRate(exchangeRateName)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Println(exchangeRateData)\n</code></pre>"},{"location":"reference/libs/external-clients/economia-awesome-api/#full-example","title":"Full Example","text":"<p>Here is a complete example demonstrating the setup and use of the <code>client</code> package in a simple application:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/external-clients/economia-awesome-api/client\"\n    \"libs/services/acl/dtos/economia-awesome-api/output\"\n)\n\nfunc main() {\n    // Create the API client\n    apiClient := client.NewClient()\n\n    // Fetch the exchange rate data\n    exchangeRateName := \"USD-BRL\"\n    exchangeRateData, err := apiClient.GetExchangeRate(exchangeRateName)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Print the exchange rate data\n    fmt.Println(exchangeRateData)\n}\n</code></pre> <p>In this example, we create a client for the Economia Awesome API, fetch exchange rate data for USD to BRL, and print the results.</p>"},{"location":"reference/libs/external-clients/economia-awesome-api/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/external-clients/economia-awesome-api/docs/godoc/#client","title":"client","text":"<pre><code>import \"libs/external-clients/economia-awesome-api/client\"\n</code></pre>"},{"location":"reference/libs/external-clients/economia-awesome-api/docs/godoc/#index","title":"Index","text":"<ul> <li>type Client</li> <li>func NewClient() *Client</li> <li>func (c *Client) GetExchangeRate(exchangeRateName string) (outputDTO.CurrencyInfoMapDTO, error)</li> </ul>"},{"location":"reference/libs/external-clients/economia-awesome-api/docs/godoc/#type-client","title":"type Client","text":"<p>Client represents a client for the Economia Awesome API.</p> <pre><code>type Client struct {\n\n    // Timeout for the API requests.\n    Timeout time.Duration\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/external-clients/economia-awesome-api/docs/godoc/#func-newclient","title":"func NewClient","text":"<pre><code>func NewClient() *Client\n</code></pre> <p>NewClient creates and returns a new Client instance with default settings.</p> <p></p>"},{"location":"reference/libs/external-clients/economia-awesome-api/docs/godoc/#func-client-getexchangerate","title":"func (*Client) GetExchangeRate","text":"<pre><code>func (c *Client) GetExchangeRate(exchangeRateName string) (outputDTO.CurrencyInfoMapDTO, error)\n</code></pre> <p>GetExchangeRate fetches the exchange rate for the given exchangeRateName from the Economia Awesome API.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/","title":"Go Doc DB","text":"<p>The <code>go-doc-db</code> library provides an in-memory document database with support for basic CRUD operations and simple query matching.</p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/#overview","title":"Overview","text":"<p>This package includes the following main components: - <code>DocumentID</code>: A type alias for a string representing a unique document identifier. - <code>Document</code>: A type alias for a map representing a document with string keys and <code>interface{}</code> values. - <code>Collection</code>: A struct representing a collection of documents with thread-safe operations. - <code>InMemoryDocBD</code>: A struct representing an in-memory document database containing multiple collections.</p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/#features","title":"Features","text":"<p>The main functionalities provided by the package include: - Creating a new collection. - Inserting, finding, updating, and deleting documents in a collection. - Listing all documents in a collection. - Querying documents in a collection based on specific criteria. - Managing collections in an in-memory document database.</p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/#types","title":"Types","text":"<ul> <li>DocumentID: Represents the unique identifier for a document.</li> <li>Document: Represents a document as a map with string keys and <code>interface{}</code> values.</li> </ul>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/#functions","title":"Functions","text":""},{"location":"reference/libs/resources/database/in-memory/go-doc-db/#collection-functions","title":"Collection Functions","text":"<ul> <li><code>NewCollection</code>: Creates and returns a new <code>Collection</code> instance.</li> <li><code>InsertOne(document Document) error</code>: Inserts a single document into the collection.</li> <li><code>FindOne(id string) (Document, error)</code>: Finds and returns a single document by its ID.</li> <li><code>FindAll() []Document</code>: Returns all documents in the collection.</li> <li><code>Find(query map[string]interface{}) []Document</code>: Finds and returns documents matching the given query.</li> <li><code>DeleteOne(id string) error</code>: Deletes a single document by its ID.</li> <li><code>UpdateOne(id string, update Document) error</code>: Updates a single document by its ID with the given update.</li> <li><code>DeleteAll() error</code>: Deletes all documents in the collection.</li> </ul>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/#utility-functions","title":"Utility Functions","text":"<ul> <li><code>matchesQuery(document, query map[string]interface{}) bool</code>: Checks if a document matches the query criteria.</li> </ul>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/#inmemorydocbd-functions","title":"InMemoryDocBD Functions","text":"<ul> <li><code>NewInMemoryDocBD(name string) *InMemoryDocBD</code>: Creates and returns a new <code>InMemoryDocBD</code> instance with the given name.</li> <li><code>GetCollection(collectionName string) (*Collection, error)</code>: Retrieves a collection by its name.</li> <li><code>CreateCollection(collectionName string) error</code>: Creates a new collection with the given name.</li> <li><code>DropCollection(collectionName string) error</code>: Drops a collection by its name.</li> <li><code>ListCollections() []string</code>: Lists the names of all collections in the database.</li> </ul>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/#usage","title":"Usage","text":""},{"location":"reference/libs/resources/database/in-memory/go-doc-db/#creating-a-new-database","title":"Creating a New Database","text":"<pre><code>import (\n    \"libs/resources/database/in-memory/go-doc-db/database\"\n)\n\ndb := database.NewInMemoryDocBD(\"myDatabase\")\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/#creating-a-new-collection","title":"Creating a New Collection","text":"<pre><code>err := db.CreateCollection(\"myCollection\")\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/#inserting-a-document","title":"Inserting a Document","text":"<pre><code>collection, err := db.GetCollection(\"myCollection\")\nif err != nil {\n    log.Fatal(err)\n}\n\ndocument := database.Document{\n    \"_id\": \"12345\",\n    \"name\": \"John Doe\",\n    \"age\": 30,\n}\n\nerr = collection.InsertOne(document)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/#finding-a-document-by-id","title":"Finding a Document by ID","text":"<pre><code>doc, err := collection.FindOne(\"12345\")\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(doc)\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/#finding-all-documents","title":"Finding All Documents","text":"<pre><code>update := database.Document{\n    \"age\": 31,\n}\nerr = collection.UpdateOne(\"12345\", update)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/#deleting-a-document","title":"Deleting a Document","text":"<pre><code>err = collection.DeleteOne(\"12345\")\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/#dropping-a-collection","title":"Dropping a Collection","text":"<pre><code>err = db.DropCollection(\"myCollection\")\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#database","title":"database","text":"<pre><code>import \"libs/resources/database/in-memory/go-doc-db/database\"\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#index","title":"Index","text":"<ul> <li>type Collection</li> <li>func NewCollection() *Collection</li> <li>func (c *Collection) DeleteAll() error</li> <li>func (c *Collection) DeleteOne(id string) error</li> <li>func (c *Collection) Find(query map[string]interface{}) []Document</li> <li>func (c *Collection) FindAll() []Document</li> <li>func (c *Collection) FindOne(id string) (Document, error)</li> <li>func (c *Collection) InsertOne(document Document) error</li> <li>func (c *Collection) UpdateOne(id string, update Document) error</li> <li>type Document</li> <li>type DocumentID</li> <li>type InMemoryDocBD</li> <li>func NewInMemoryDocBD(name string) *InMemoryDocBD</li> <li>func (d *InMemoryDocBD) CreateCollection(collectionName string) error</li> <li>func (d *InMemoryDocBD) DropCollection(collectionName string) error</li> <li>func (d *InMemoryDocBD) GetCollection(collectionName string) (*Collection, error)</li> <li>func (d *InMemoryDocBD) ListCollections() []string</li> </ul>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#type-collection","title":"type Collection","text":"<p>Collection represents a collection of documents with thread-safe operations.</p> <pre><code>type Collection struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#func-newcollection","title":"func NewCollection","text":"<pre><code>func NewCollection() *Collection\n</code></pre> <p>NewCollection creates and returns a new Collection instance.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#func-collection-deleteall","title":"func (*Collection) DeleteAll","text":"<pre><code>func (c *Collection) DeleteAll() error\n</code></pre> <p>DeleteAll deletes all documents in the collection.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#func-collection-deleteone","title":"func (*Collection) DeleteOne","text":"<pre><code>func (c *Collection) DeleteOne(id string) error\n</code></pre> <p>DeleteOne deletes a single document by its ID.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#func-collection-find","title":"func (*Collection) Find","text":"<pre><code>func (c *Collection) Find(query map[string]interface{}) []Document\n</code></pre> <p>Find searches documents matching a given query.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#func-collection-findall","title":"func (*Collection) FindAll","text":"<pre><code>func (c *Collection) FindAll() []Document\n</code></pre> <p>FindAll returns all documents in the collection.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#func-collection-findone","title":"func (*Collection) FindOne","text":"<pre><code>func (c *Collection) FindOne(id string) (Document, error)\n</code></pre> <p>FindOne finds and returns a single document by its ID.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#func-collection-insertone","title":"func (*Collection) InsertOne","text":"<pre><code>func (c *Collection) InsertOne(document Document) error\n</code></pre> <p>InsertOne inserts a single document into the collection.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#func-collection-updateone","title":"func (*Collection) UpdateOne","text":"<pre><code>func (c *Collection) UpdateOne(id string, update Document) error\n</code></pre> <p>UpdateOne updates a single document by its ID with the given update.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#type-document","title":"type Document","text":"<p>Document represents a document as a map with string keys and interface{} values.</p> <pre><code>type Document map[string]interface{}\n</code></pre> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#type-documentid","title":"type DocumentID","text":"<p>DocumentID represents the unique identifier for a document.</p> <pre><code>type DocumentID string\n</code></pre> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#type-inmemorydocbd","title":"type InMemoryDocBD","text":"<p>InMemoryDocBD represents an in-memory document database containing multiple collections.</p> <pre><code>type InMemoryDocBD struct {\n    Name        string\n    Collections map[string]*Collection\n}\n</code></pre> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#func-newinmemorydocbd","title":"func NewInMemoryDocBD","text":"<pre><code>func NewInMemoryDocBD(name string) *InMemoryDocBD\n</code></pre> <p>NewInMemoryDocBD creates and returns a new InMemoryDocBD instance with the given name.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#func-inmemorydocbd-createcollection","title":"func (*InMemoryDocBD) CreateCollection","text":"<pre><code>func (d *InMemoryDocBD) CreateCollection(collectionName string) error\n</code></pre> <p>CreateCollection creates a new collection with the given name.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#func-inmemorydocbd-dropcollection","title":"func (*InMemoryDocBD) DropCollection","text":"<pre><code>func (d *InMemoryDocBD) DropCollection(collectionName string) error\n</code></pre> <p>DropCollection drops a collection by its name.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#func-inmemorydocbd-getcollection","title":"func (*InMemoryDocBD) GetCollection","text":"<pre><code>func (d *InMemoryDocBD) GetCollection(collectionName string) (*Collection, error)\n</code></pre> <p>GetCollection retrieves a collection by its name.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db/docs/godoc/#func-inmemorydocbd-listcollections","title":"func (*InMemoryDocBD) ListCollections","text":"<pre><code>func (d *InMemoryDocBD) ListCollections() []string\n</code></pre> <p>ListCollections lists the names of all collections in the database.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/","title":"Go doc DB Client","text":"<p>The <code>go-doc-db-client</code> library provides a convenient interface to interact with the in-memory document database.</p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/#overview","title":"Overview","text":"<p>The client package includes the following main components: - <code>Client</code>: A struct that provides methods to perform CRUD operations on collections and documents within the in-memory document database.</p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/#features","title":"Features","text":"<p>The main functionalities provided by the package include: - Creating and dropping collections. - Inserting, finding, updating, and deleting documents in collections. - Listing all collections in the database. - Querying documents in collections based on specific criteria.</p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/#types","title":"Types","text":"<ul> <li>Client: Provides an interface to interact with the in-memory document database.</li> </ul>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/#functions","title":"Functions","text":""},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/#client-functions","title":"Client Functions","text":"<ul> <li><code>NewClient(db *database.InMemoryDocBD) *Client</code>: Creates and returns a new <code>Client</code> instance.</li> <li><code>CreateCollection(collectionName string) error</code>: Creates a new collection with the given name.</li> <li><code>DropCollection(collectionName string) error</code>: Drops a collection by its name.</li> <li><code>ListCollections() []string</code>: Lists the names of all collections in the database.</li> <li><code>ConvertToDocument(document map[string]interface{}) (database.Document, error)</code>: Converts a map to a <code>Document</code> type.</li> <li><code>InsertOne(collectionName string, document map[string]interface{}) error</code>: Inserts a single document into the specified collection.</li> <li><code>FindOne(collectionName string, id string) (map[string]interface{}, error)</code>: Finds and returns a single document by its ID from the specified collection.</li> <li><code>FindAll(collectionName string) ([]map[string]interface{}, error)</code>: Returns all documents from the specified collection.</li> <li><code>Find(collectionName string, filter map[string]interface{}) ([]map[string]interface{}, error)</code>: Returns documents matching the given query from the specified collection.</li> <li><code>UpdateOne(collectionName string, id string, update map[string]interface{}) error</code>: Updates a single document by its ID with the given update in the specified collection.</li> <li><code>DeleteOne(collectionName string, id string) error</code>: Deletes a single document by its ID from the specified collection.</li> <li><code>DeleteAll(collectionName string) error</code>: Deletes all documents from the specified collection.</li> </ul>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/#usage","title":"Usage","text":""},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/#creating-a-new-client","title":"Creating a New Client","text":"<pre><code>import (\n    \"libs/resources/database/in-memory/go-doc-db\"\n)\n\ndb := database.NewInMemoryDocBD(\"myDatabase\")\nclient := client.NewClient(db)\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/#creating-a-new-collection","title":"Creating a New Collection","text":"<pre><code>err := client.CreateCollection(\"myCollection\")\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/#inserting-a-document","title":"Inserting a Document","text":"<pre><code>document := map[string]interface{}{\n    \"_id\": \"12345\",\n    \"name\": \"John Doe\",\n    \"age\": 30,\n}\n\nerr = client.InsertOne(\"myCollection\", document)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/#finding-a-document-by-id","title":"Finding a Document by ID","text":"<pre><code>doc, err := client.FindOne(\"myCollection\", \"12345\")\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(doc)\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/#finding-all-documents","title":"Finding All Documents","text":"<pre><code>docs, err := client.FindAll(\"myCollection\")\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(docs)\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/#updating-a-document","title":"Updating a Document","text":"<pre><code>update := map[string]interface{}{\n    \"age\": 31,\n}\nerr = client.UpdateOne(\"myCollection\", \"12345\", update)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/#deleting-a-document","title":"Deleting a Document","text":"<pre><code>err = client.DeleteOne(\"myCollection\", \"12345\")\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/#dropping-a-collection","title":"Dropping a Collection","text":"<pre><code>err = client.DropCollection(\"myCollection\")\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/docs/godoc/#client","title":"client","text":"<pre><code>import \"libs/resources/database/in-memory/go-doc-db-client/client\"\n</code></pre>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/docs/godoc/#index","title":"Index","text":"<ul> <li>type Client</li> <li>func NewClient(db *database.InMemoryDocBD) *Client</li> <li>func (c *Client) ConvertToDocument(document map[string]interface{}) (database.Document, error)</li> <li>func (c *Client) CreateCollection(collectionName string) error</li> <li>func (c *Client) DeleteAll(collectionName string) error</li> <li>func (c *Client) DeleteOne(collectionName string, id string) error</li> <li>func (c *Client) DropCollection(collectionName string) error</li> <li>func (c *Client) Find(collectionName string, filter map[string]interface{}) ([]map[string]interface{}, error)</li> <li>func (c *Client) FindAll(collectionName string) ([]map[string]interface{}, error)</li> <li>func (c *Client) FindOne(collectionName string, id string) (map[string]interface{}, error)</li> <li>func (c *Client) InsertOne(collectionName string, document map[string]interface{}) error</li> <li>func (c *Client) ListCollections() []string</li> <li>func (c *Client) UpdateOne(collectionName string, id string, update map[string]interface{}) error</li> </ul>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/docs/godoc/#type-client","title":"type Client","text":"<p>Client provides an interface to interact with the in-memory document database.</p> <pre><code>type Client struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/docs/godoc/#func-newclient","title":"func NewClient","text":"<pre><code>func NewClient(db *database.InMemoryDocBD) *Client\n</code></pre> <p>NewClient creates and returns a new Client instance.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/docs/godoc/#func-client-converttodocument","title":"func (*Client) ConvertToDocument","text":"<pre><code>func (c *Client) ConvertToDocument(document map[string]interface{}) (database.Document, error)\n</code></pre> <p>ConvertToDocument converts a map to a Document type. Returns an error if the document is nil or the _id field is missing.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/docs/godoc/#func-client-createcollection","title":"func (*Client) CreateCollection","text":"<pre><code>func (c *Client) CreateCollection(collectionName string) error\n</code></pre> <p>CreateCollection creates a new collection with the given name. Returns an error if the collection already exists.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/docs/godoc/#func-client-deleteall","title":"func (*Client) DeleteAll","text":"<pre><code>func (c *Client) DeleteAll(collectionName string) error\n</code></pre> <p>DeleteAll deletes all documents from the specified collection. Returns an error if the collection does not exist.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/docs/godoc/#func-client-deleteone","title":"func (*Client) DeleteOne","text":"<pre><code>func (c *Client) DeleteOne(collectionName string, id string) error\n</code></pre> <p>DeleteOne deletes a single document by its ID from the specified collection. Returns an error if the collection or document does not exist.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/docs/godoc/#func-client-dropcollection","title":"func (*Client) DropCollection","text":"<pre><code>func (c *Client) DropCollection(collectionName string) error\n</code></pre> <p>DropCollection drops a collection by its name. Returns an error if the collection does not exist.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/docs/godoc/#func-client-find","title":"func (*Client) Find","text":"<pre><code>func (c *Client) Find(collectionName string, filter map[string]interface{}) ([]map[string]interface{}, error)\n</code></pre> <p>Find returns documents matching the given query from the specified collection. Returns an error if the collection does not exist.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/docs/godoc/#func-client-findall","title":"func (*Client) FindAll","text":"<pre><code>func (c *Client) FindAll(collectionName string) ([]map[string]interface{}, error)\n</code></pre> <p>FindAll returns all documents from the specified collection. Returns an error if the collection does not exist.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/docs/godoc/#func-client-findone","title":"func (*Client) FindOne","text":"<pre><code>func (c *Client) FindOne(collectionName string, id string) (map[string]interface{}, error)\n</code></pre> <p>FindOne finds and returns a single document by its ID from the specified collection. Returns an error if the collection or document does not exist.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/docs/godoc/#func-client-insertone","title":"func (*Client) InsertOne","text":"<pre><code>func (c *Client) InsertOne(collectionName string, document map[string]interface{}) error\n</code></pre> <p>InsertOne inserts a single document into the specified collection. Returns an error if the collection does not exist or the document is invalid.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/docs/godoc/#func-client-listcollections","title":"func (*Client) ListCollections","text":"<pre><code>func (c *Client) ListCollections() []string\n</code></pre> <p>ListCollections lists the names of all collections in the database.</p> <p></p>"},{"location":"reference/libs/resources/database/in-memory/go-doc-db-client/docs/godoc/#func-client-updateone","title":"func (*Client) UpdateOne","text":"<pre><code>func (c *Client) UpdateOne(collectionName string, id string, update map[string]interface{}) error\n</code></pre> <p>UpdateOne updates a single document by its ID with the given update in the specified collection. Returns an error if the collection or document does not exist.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/","title":"economia-awesome-api","text":"<p>This library provides Data Transfer Objects (DTOs) for handling <code>economia-awesome-api</code> information in a Go project. It defines structures for output data formats.</p>"},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/#packages","title":"Packages","text":""},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/#output","title":"output","text":"<p>The <code>output</code> package is designed to facilitate the transfer of data between different layers of an application, ensuring a clear and consistent structure for currency information from <code>economia-awesome-api</code> in output context.</p>"},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/#usage","title":"Usage","text":""},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/#currencyinfodto","title":"CurrencyInfoDTO","text":"<p>The <code>CurrencyInfoDTO</code> struct contains detailed information about an exchange rate. Each field is mapped to a JSON key, allowing easy serialization and deserialization.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    outputDTO \"libs/services/acl/dtos/economia-awesome-api/output\"\n)\n\nfunc main() {\n    currencyInfo := outputDTO.CurrencyInfoDTO{\n        Code:       \"USD\",\n        CodeIn:     \"BRL\",\n        Name:       \"Dollar\",\n        High:       \"5.30\",\n        Low:        \"5.20\",\n        VarBid:     \"0.05\",\n        PctChange:  \"0.95\",\n        Bid:        \"5.25\",\n        Ask:        \"5.26\",\n        Timestamp:  \"1625164800\",\n        CreateDate: \"2021-07-01T12:00:00Z\",\n    }\n    fmt.Printf(\"%+v\\n\", currencyInfo)\n}\n</code></pre>"},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/#currencyinfomapdto","title":"CurrencyInfoMapDTO","text":"<p>The <code>CurrencyInfoMapDTO</code> is a map where the keys are currency codes and the values are <code>CurrencyInfoDTO</code> objects. This structure is useful for storing and retrieving exchange rate information for multiple currencies.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    outputDTO \"libs/services/acl/dtos/economia-awesome-api/output\"\n)\n\nfunc main() {\n    currencyInfoMap := outputDTO.CurrencyInfoMapDTO{\n        \"USDBRL\": outputDTO.CurrencyInfoDTO{\n            Code:       \"USD\",\n            CodeIn:     \"BRL\",\n            Name:       \"Dollar\",\n            High:       \"5.30\",\n            Low:        \"5.20\",\n            VarBid:     \"0.05\",\n            PctChange:  \"0.95\",\n            Bid:        \"5.25\",\n            Ask:        \"5.26\",\n            Timestamp:  \"1625164800\",\n            CreateDate: \"2021-07-01T12:00:00Z\",\n        },\n        \"EURBRL\": outputDTO.CurrencyInfoDTO{\n            Code:       \"EUR\",\n            CodeIn:     \"BRL\",\n            Name:       \"Euro\",\n            High:       \"6.20\",\n            Low:        \"6.10\",\n            VarBid:     \"0.03\",\n            PctChange:  \"0.50\",\n            Bid:        \"6.15\",\n            Ask:        \"6.16\",\n            Timestamp:  \"1625164800\",\n            CreateDate: \"2021-07-01T12:00:00Z\",\n        },\n    }\n    fmt.Printf(\"%+v\\n\", currencyInfoMap)\n}\n</code></pre>"},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/docs/godoc/#outputdto","title":"outputdto","text":"<pre><code>import \"libs/services/acl/dtos/economia-awesome-api/output\"\n</code></pre>"},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/docs/godoc/#index","title":"Index","text":"<ul> <li>type CurrencyInfoDTO</li> <li>type CurrencyInfoMapDTO</li> </ul>"},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/docs/godoc/#type-currencyinfodto","title":"type CurrencyInfoDTO","text":"<p>CurrencyInfoDTO contains detailed information about the exchange rate.</p> <pre><code>type CurrencyInfoDTO struct {\n    Code       string `json:\"code\"`\n    CodeIn     string `json:\"codein\"`\n    Name       string `json:\"name\"`\n    High       string `json:\"high\"`\n    Low        string `json:\"low\"`\n    VarBid     string `json:\"varBid\"`\n    PctChange  string `json:\"pctChange\"`\n    Bid        string `json:\"bid\"`\n    Ask        string `json:\"ask\"`\n    Timestamp  string `json:\"timestamp\"`\n    CreateDate string `json:\"create_date\"`\n}\n</code></pre> <p></p>"},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/docs/godoc/#type-currencyinfomapdto","title":"type CurrencyInfoMapDTO","text":"<p>CurrencyInfoMapDTO is a map of currency codes to CurrencyInfo.</p> <pre><code>type CurrencyInfoMapDTO map[string]CurrencyInfoDTO\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/","title":"exchange-rate","text":"<p>This library provides Data Transfer Objects (DTOs) for handling exchange rate information in a Go project. It defines structures for both input and output data formats.</p>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/#packages","title":"Packages","text":""},{"location":"reference/libs/services/acl/dtos/exchange-rate/#input","title":"input","text":"<p>The <code>input</code> package is designed to facilitate the transfer of data between different layers of an application, ensuring a clear and consistent structure for currency information from <code>exchange-rate</code> api in input context.</p>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/#output","title":"output","text":"<p>The <code>output</code> package is designed to facilitate the transfer of data between different layers of an application, ensuring a clear and consistent structure for currency information from <code>exchange-rate</code> api in input context.</p>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/#usage","title":"Usage","text":"<p>Here's an example of how to use the DTOs in your application:</p>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/#input_1","title":"Input","text":"<pre><code>import (\n    inputDTO \"libs/services/acl/dtos/exchange-rate/input\"\n)\n\nfunc processInput(data inputDTO.ExchangeRateDTO) {\n    // Process the input data\n    fmt.Println(data.Name)\n}\n</code></pre>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/#output_1","title":"Output","text":"<pre><code>import (\n    outputDTO \"libs/services/acl/dtos/exchange-rate/output\"\n)\n\nfunc generateOutput() outputdto.ExchangeRateDTO {\n    return outputdto.ExchangeRateDTO{\n        Code:       \"USD\",\n        CodeIn:     \"BRL\",\n        Name:       \"Dollar\",\n        High:       5.40,\n        Low:        5.20,\n        VarBid:     0.02,\n        PctChange:  0.37,\n        Bid:        5.30,\n        Ask:        5.32,\n        Timestamp:  1612300800,\n        CreateDate: \"2024-05-21\",\n    }\n}\n\nfunc displayOutput(data outputdto.ExchangeRatesDTO) {\n    for _, rate := range data {\n        fmt.Printf(\"Currency: %s, Bid: %f, Ask: %f\\n\", rate.Name, rate.Bid, rate.Ask)\n    }\n}\n</code></pre>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/services/acl/dtos/exchange-rate/docs/godoc/#inputdto","title":"inputdto","text":"<pre><code>import \"libs/services/acl/dtos/exchange-rate/input\"\n</code></pre>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/docs/godoc/#index","title":"Index","text":"<ul> <li>type ExchangeRateDTO</li> </ul>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/docs/godoc/#type-exchangeratedto","title":"type ExchangeRateDTO","text":"<p>ExchangeRateDTO is a data transfer object that represents the exchange rate api input.</p> <pre><code>type ExchangeRateDTO struct {\n    Name string `json:\"name\"`\n}\n</code></pre>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/docs/godoc/#outputdto","title":"outputdto","text":"<pre><code>import \"libs/services/acl/dtos/exchange-rate/output\"\n</code></pre>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/docs/godoc/#index_1","title":"Index","text":"<ul> <li>type ExchangeRateDTO</li> <li>type ExchangeRatesDTO</li> </ul>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/docs/godoc/#type-exchangeratedto_1","title":"type ExchangeRateDTO","text":"<p>ExchangeRateDTO is a data transfer object that represents the exchange rate api output.</p> <pre><code>type ExchangeRateDTO struct {\n    Code       string  `json:\"code\"`\n    CodeIn     string  `json:\"codein\"`\n    Name       string  `json:\"name\"`\n    High       float64 `json:\"high\"`\n    Low        float64 `json:\"low\"`\n    VarBid     float64 `json:\"varBid\"`\n    PctChange  float64 `json:\"pctChange\"`\n    Bid        float64 `json:\"bid\"`\n    Ask        float64 `json:\"ask\"`\n    Timestamp  int64   `json:\"timestamp\"`\n    CreateDate string  `json:\"create_date\"`\n}\n</code></pre> <p></p>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/docs/godoc/#type-exchangeratesdto","title":"type ExchangeRatesDTO","text":"<p>ExchangeRatesDTO is a data transfer object that represents a map of exchange rates.</p> <pre><code>type ExchangeRatesDTO map[string]ExchangeRateDTO\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/services/entities/exchange-rate/","title":"exchange-rateentity Library","text":""},{"location":"reference/libs/services/entities/exchange-rate/#overview","title":"Overview","text":"<p>The <code>exchange-rate</code> library provides a Go package to manage and manipulate exchange rate information for currency pairs entity. This library includes functionality to create, validate, and convert exchange rate data between different formats, and it also defines an interface for repositories to interact with this data.</p>"},{"location":"reference/libs/services/entities/exchange-rate/#usage","title":"Usage","text":""},{"location":"reference/libs/services/entities/exchange-rate/#currencyinfo","title":"CurrencyInfo","text":"<p>The <code>CurrencyInfo</code> struct represents the exchange rate entity information for a currency pair. </p>"},{"location":"reference/libs/services/entities/exchange-rate/#fields","title":"Fields","text":"<ul> <li><code>ID</code>: Unique identifier for the exchange rate entity.</li> <li><code>Code</code>: The base currency code.</li> <li><code>CodeIn</code>: The target currency code.</li> <li><code>Name</code>: The name of the currency pair.</li> <li><code>High</code>: The highest rate observed.</li> <li><code>Low</code>: The lowest rate observed.</li> <li><code>VarBid</code>: The variation of the bid price.</li> <li><code>PctChange</code>: The percentage change.</li> <li><code>Bid</code>: The bid price.</li> <li><code>Ask</code>: The ask price.</li> <li><code>Timestamp</code>: The timestamp of the rate information.</li> <li><code>CreateDate</code>: The date when the record was created.</li> </ul>"},{"location":"reference/libs/services/entities/exchange-rate/#creating-a-new-currencyinfo-entity","title":"Creating a New CurrencyInfo Entity","text":"<p>You can create a new <code>CurrencyInfo</code> entity using the <code>NewExchangeRate</code> function, which validates the input and converts string values to appropriate data types.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"time\"\n\n    entity \"libs/services/entities/exchange-rate\"\n)\n\nfunc main() {\n    exchangeRate, err := entity.NewExchangeRate(\n        \"USD\",\n        \"BRL\",\n        \"US Dollar/Brazilian Real\",\n        \"5.4\",\n        \"5.2\",\n        \"0.2\",\n        \"3.7\",\n        \"5.3\",\n        \"5.4\",\n        fmt.Sprintf(\"%d\", time.Now().Unix()), time.Now().Format(\"2006-01-02 15:04:05\"),\n    )\n\n    if err != nil {\n        log.Fatalf(\"Error creating exchange rate: %v\", err)\n    }\n\n    fmt.Printf(\"New Exchange Rate: %+v\\n\", exchangeRate)\n}\n</code></pre>"},{"location":"reference/libs/services/entities/exchange-rate/#converting-currencyinfo-to-map","title":"Converting CurrencyInfo to Map","text":"<p>You can convert a <code>CurrencyInfo</code> object to a map representation using the <code>ToMap</code> method.</p> <pre><code>currencyMap := exchangeRate.ToMap()\nfmt.Printf(\"CurrencyInfo as Map: %+v\\n\", currencyMap)\n</code></pre>"},{"location":"reference/libs/services/entities/exchange-rate/#converting-map-to-currencyinfo","title":"Converting Map to CurrencyInfo","text":"<p>You can convert a map representation back to a <code>CurrencyInfo</code> entity using the <code>MapToCurrencyInfoEntity</code> function.</p> <pre><code>currencyEntity, err := entity.MapToCurrencyInfoEntity(currencyMap)\nif err != nil {\n    log.Fatalf(\"Error converting map to CurrencyInfo: %v\", err)\n}\n\nfmt.Printf(\"CurrencyInfo Entity: %+v\\n\", currencyEntity)\n</code></pre>"},{"location":"reference/libs/services/entities/exchange-rate/#repository-interface","title":"Repository Interface","text":"<p>The <code>ExchangeRateRepositoryInterface</code> defines the methods that any repository implementation of <code>CurrencyInfo</code> must implement.</p>"},{"location":"reference/libs/services/entities/exchange-rate/#methods","title":"Methods","text":"<ul> <li><code>Save(currencyInfo *CurrencyInfo) error</code>: Saves a <code>CurrencyInfo</code> entity.</li> <li><code>FindAll() ([]*CurrencyInfo, error)</code>: Retrieves all <code>CurrencyInfo</code> entities.</li> <li><code>Find(code string, codeIn string) ([]*CurrencyInfo, error)</code>: Finds <code>CurrencyInfo</code> entities by currency codes.</li> <li><code>FindByID(id string) (*CurrencyInfo, error)</code>: Finds a <code>CurrencyInfo</code> entity by its ID.</li> <li><code>Delete(id string) error</code>: Deletes a <code>CurrencyInfo</code> entity by its ID.</li> </ul>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#exchangerateentity","title":"exchangerateentity","text":"<pre><code>import \"libs/services/entities/exchange-rate/entity\"\n</code></pre>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#index","title":"Index","text":"<ul> <li>func StringToFloat64(s string) (float64, error)</li> <li>func StringToInt64(s string) (int64, error)</li> <li>type CurrencyInfo</li> <li>func MapToCurrencyInfoEntity(document map[string]interface{}) (*CurrencyInfo, error)</li> <li>func NewExchangeRate(code string, codeIn string, name string, high string, low string, varBid string, pctChange string, bid string, ask string, timestamp string, createDate string) (*CurrencyInfo, error)</li> <li>func (e *CurrencyInfo) GetEntityID() string</li> <li>func (e *CurrencyInfo) ToMap() map[string]interface{}</li> <li>type ExchangeRateRepositoryInterface</li> </ul>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#func-stringtofloat64","title":"func StringToFloat64","text":"<pre><code>func StringToFloat64(s string) (float64, error)\n</code></pre> <p>StringToFloat64 converts a string to a float64. It returns the float64 value and an error if the conversion fails.</p> <p></p>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#func-stringtoint64","title":"func StringToInt64","text":"<pre><code>func StringToInt64(s string) (int64, error)\n</code></pre> <p>StringToInt64 converts a string to an int64. It returns the int64 value and an error if the conversion fails.</p> <p></p>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#type-currencyinfo","title":"type CurrencyInfo","text":"<p>CurrencyInfo represents the exchange rate information for a currency pair.</p> <pre><code>type CurrencyInfo struct {\n    ID         gouuid.ID `json:\"_id\"`\n    Code       string    `json:\"code\"`\n    CodeIn     string    `json:\"codeIn\"`\n    Name       string    `json:\"name\"`\n    High       float64   `json:\"high\"`\n    Low        float64   `json:\"low\"`\n    VarBid     float64   `json:\"varBid\"`\n    PctChange  float64   `json:\"pctChange\"`\n    Bid        float64   `json:\"bid\"`\n    Ask        float64   `json:\"ask\"`\n    Timestamp  int64     `json:\"timestamp\"`\n    CreateDate time.Time `json:\"create_date\"`\n}\n</code></pre> <p></p>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#func-maptocurrencyinfoentity","title":"func MapToCurrencyInfoEntity","text":"<pre><code>func MapToCurrencyInfoEntity(document map[string]interface{}) (*CurrencyInfo, error)\n</code></pre> <p>MapToCurrencyInfoEntity converts a map representation of a CurrencyInfo object back to a CurrencyInfo entity.</p> <p></p>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#func-newexchangerate","title":"func NewExchangeRate","text":"<pre><code>func NewExchangeRate(code string, codeIn string, name string, high string, low string, varBid string, pctChange string, bid string, ask string, timestamp string, createDate string) (*CurrencyInfo, error)\n</code></pre> <p>NewExchangeRate creates a new CurrencyInfo entity from string inputs. It converts string inputs to appropriate data types, validates them, and initializes a new CurrencyInfo object.</p> <p></p>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#func-currencyinfo-getentityid","title":"func (*CurrencyInfo) GetEntityID","text":"<pre><code>func (e *CurrencyInfo) GetEntityID() string\n</code></pre>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#func-currencyinfo-tomap","title":"func (*CurrencyInfo) ToMap","text":"<pre><code>func (e *CurrencyInfo) ToMap() map[string]interface{}\n</code></pre> <p>ToMap converts the CurrencyInfo object to a map representation.</p> <p></p>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#type-exchangeraterepositoryinterface","title":"type ExchangeRateRepositoryInterface","text":"<p>ExchangeRateRepositoryInterface defines the methods that any repository implementation of CurrencyInfo must implement.</p> <pre><code>type ExchangeRateRepositoryInterface interface {\n    Save(currencyInfo *CurrencyInfo) error\n    FindAll() ([]*CurrencyInfo, error)\n    Find(code string, codeIn string) ([]*CurrencyInfo, error)\n    FindByID(id string) (*CurrencyInfo, error)\n    Delete(id string) error\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/","title":"Exchange Rate Repository","text":"<p>The <code>exchange-rate</code> library provides a repository to handle CRUD operations for exchange rate entities using an in-memory document database.</p>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/#overview","title":"Overview","text":"<p>This package includes the following main components: - <code>ExchangeRateRepository</code>: A struct that provides methods to perform CRUD operations on exchange rate entities within the in-memory document database.</p>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/#features","title":"Features","text":"<p>The main functionalities provided by the package include: - Ensuring the collection exists. - Saving exchange rate entities to the collection. - Finding exchange rate entities by various criteria. - Deleting exchange rate entities from the collection.</p>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/#types","title":"Types","text":"<ul> <li>ExchangeRateRepository: Provides methods to interact with exchange rate entities in the in-memory document database.</li> </ul>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/#functions","title":"Functions","text":""},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/#exchangeraterepository-functions","title":"ExchangeRateRepository Functions","text":"<ul> <li><code>NewExchangeRateRepository(database string, client *client.Client) *ExchangeRateRepository</code>: Creates and returns a new <code>ExchangeRateRepository</code> instance.</li> <li><code>Save(currencyInfo *entity.CurrencyInfo) error</code>: Saves the given currency info entity into the collection.</li> <li><code>FindAll() ([]*entity.CurrencyInfo, error)</code>: Retrieves all exchange rate entities from the collection.</li> <li><code>FindByID(id string) (*entity.CurrencyInfo, error)</code>: Retrieves a single exchange rate entity by its ID from the collection.</li> <li><code>Find(code string, codeIn string) ([]*entity.CurrencyInfo, error)</code>: Retrieves exchange rate entities by their code and codeIn from the collection.</li> <li><code>Delete(id string) error</code>: Removes a single exchange rate entity by its ID from the collection.</li> </ul>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/#usage","title":"Usage","text":""},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/#creating-a-new-repository","title":"Creating a New Repository","text":"<pre><code>import (\n    \"libs/resources/database/in-memory/go-doc-db-client/client\"\n    entity \"libs/services/entities/exchange-rate/entity\"\n    repository \"libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/repository\"\n)\n\ndbClient := client.NewClient(database.NewInMemoryDocBD(\"myDatabase\"))\nrepository := repository.NewExchangeRateRepository(\"myDatabase\", dbClient)\n</code></pre>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/#saving-a-currency-info","title":"Saving a Currency Info","text":"<pre><code>currencyInfo := &amp;entity.CurrencyInfo{\n    ID:     \"12345\",\n    Code:   \"USD\",\n    CodeIn: \"BRL\",\n    Rate:   5.42,\n}\n\nerr := repository.Save(currencyInfo)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/#finding-all-currency-infos","title":"Finding All Currency Infos","text":"<pre><code>currencyInfos, err := repository.FindAll()\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(currencyInfos)\n</code></pre>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/#finding-a-currency-info-by-id","title":"Finding a Currency Info by ID","text":"<pre><code>currencyInfo, err := repository.FindByID(\"12345\")\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(currencyInfo)\n</code></pre>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/#finding-currency-infos-by-code","title":"Finding Currency Infos by Code","text":"<pre><code>currencyInfos, err := repository.Find(\"USD\", \"BRL\")\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(currencyInfos)\n</code></pre>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/#deleting-a-currency-info-by-id","title":"Deleting a Currency Info by ID","text":"<pre><code>err := repository.Delete(\"12345\")\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/docs/godoc/#godocdbrepository","title":"godocdbrepository","text":"<pre><code>import \"libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/repository\"\n</code></pre>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/docs/godoc/#index","title":"Index","text":"<ul> <li>type ExchangeRateRepository</li> <li>func NewExchangeRateRepository(database string, client *client.Client) *ExchangeRateRepository</li> <li>func (r *ExchangeRateRepository) Delete(id string) error</li> <li>func (r *ExchangeRateRepository) Find(code string, codeIn string) ([]*entity.CurrencyInfo, error)</li> <li>func (r *ExchangeRateRepository) FindAll() ([]*entity.CurrencyInfo, error)</li> <li>func (r *ExchangeRateRepository) FindByID(id string) (*entity.CurrencyInfo, error)</li> <li>func (r *ExchangeRateRepository) Save(currencyInfo *entity.CurrencyInfo) error</li> </ul>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/docs/godoc/#type-exchangeraterepository","title":"type ExchangeRateRepository","text":"<p>ExchangeRateRepository handles the CRUD operations for exchange rate entities using the in-memory database client.</p> <pre><code>type ExchangeRateRepository struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/docs/godoc/#func-newexchangeraterepository","title":"func NewExchangeRateRepository","text":"<pre><code>func NewExchangeRateRepository(database string, client *client.Client) *ExchangeRateRepository\n</code></pre> <p>NewExchangeRateRepository creates and returns a new ExchangeRateRepository instance.</p> <p></p>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/docs/godoc/#func-exchangeraterepository-delete","title":"func (*ExchangeRateRepository) Delete","text":"<pre><code>func (r *ExchangeRateRepository) Delete(id string) error\n</code></pre> <p>Delete removes a single exchange rate entity by its ID from the collection.</p> <p></p>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/docs/godoc/#func-exchangeraterepository-find","title":"func (*ExchangeRateRepository) Find","text":"<pre><code>func (r *ExchangeRateRepository) Find(code string, codeIn string) ([]*entity.CurrencyInfo, error)\n</code></pre> <p>Find retrieves exchange rate entities by their code and codeIn from the collection.</p> <p></p>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/docs/godoc/#func-exchangeraterepository-findall","title":"func (*ExchangeRateRepository) FindAll","text":"<pre><code>func (r *ExchangeRateRepository) FindAll() ([]*entity.CurrencyInfo, error)\n</code></pre> <p>FindAll retrieves all exchange rate entities from the collection.</p> <p></p>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/docs/godoc/#func-exchangeraterepository-findbyid","title":"func (*ExchangeRateRepository) FindByID","text":"<pre><code>func (r *ExchangeRateRepository) FindByID(id string) (*entity.CurrencyInfo, error)\n</code></pre> <p>FindByID retrieves a single exchange rate entity by its ID from the collection.</p> <p></p>"},{"location":"reference/libs/services/infrastructure/database/repositories/exchange-rate/in-memory/go-doc-db/docs/godoc/#func-exchangeraterepository-save","title":"func (*ExchangeRateRepository) Save","text":"<pre><code>func (r *ExchangeRateRepository) Save(currencyInfo *entity.CurrencyInfo) error\n</code></pre> <p>Save saves the given currency info entity into the collection.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/services/infrastructure/server/http/handlers/exchange-rate/","title":"Exchange Rate Handlers","text":"<p>The <code>exchange-rate</code> library provides HTTP handlers for exchange rate operations, utilizing the exchange rate use cases and entities.</p>"},{"location":"reference/libs/services/infrastructure/server/http/handlers/exchange-rate/#overview","title":"Overview","text":"<p>The <code>handlers</code> package includes the following main components: - <code>WebServiceExchangeRateHandler</code>: A struct that provides methods to handle HTTP requests related to exchange rates.</p>"},{"location":"reference/libs/services/infrastructure/server/http/handlers/exchange-rate/#features","title":"Features","text":"<p>The main functionalities provided by the package include: - Handling HTTP GET requests to list the current exchange rate.</p>"},{"location":"reference/libs/services/infrastructure/server/http/handlers/exchange-rate/#types","title":"Types","text":"<ul> <li>WebServiceExchangeRateHandler: Handles HTTP requests for exchange rate operations.</li> </ul>"},{"location":"reference/libs/services/infrastructure/server/http/handlers/exchange-rate/#functions","title":"Functions","text":""},{"location":"reference/libs/services/infrastructure/server/http/handlers/exchange-rate/#webserviceexchangeratehandler-functions","title":"WebServiceExchangeRateHandler Functions","text":"<ul> <li><code>NewWebServiceExchangeRateHandler(exchangeRateRepository entity.ExchangeRateRepositoryInterface) *WebServiceExchangeRateHandler</code>: Creates and returns a new <code>WebServiceExchangeRateHandler</code> instance.</li> <li><code>ListCurrentExchangeRate(w http.ResponseWriter, r *http.Request)</code>: Handles HTTP GET requests to list the current exchange rate.</li> </ul>"},{"location":"reference/libs/services/infrastructure/server/http/handlers/exchange-rate/#usage","title":"Usage","text":""},{"location":"reference/libs/services/infrastructure/server/http/handlers/exchange-rate/#creating-a-new-handler","title":"Creating a New Handler","text":"<pre><code>exchangeRateRepository := // initialize your ExchangeRateRepository\nhandler := handlers.NewWebServiceExchangeRateHandler(exchangeRateRepository)\n</code></pre>"},{"location":"reference/libs/services/infrastructure/server/http/handlers/exchange-rate/#handling-http-requests","title":"Handling HTTP Requests","text":"<pre><code>http.HandleFunc(\"/exchange-rate\", handler.ListCurrentExchangeRate)\n</code></pre>"},{"location":"reference/libs/services/infrastructure/server/http/handlers/exchange-rate/#example","title":"Example","text":"<p>Here is a complete example of setting up the handler with an HTTP server:</p> <pre><code>package main\n\nimport (\n    \"libs/resources/database/in-memory/go-doc-db-client/client\"\n    \"libs/resources/database/in-memory/go-doc-db/database\"\n    \"libs/services/entities/exchange-rate/entity\"\n    \"libs/services/usecases/exchange-rate/usecases\"\n    \"libs/web/handlers\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n    // Initialize the in-memory database and repository\n    dbClient := client.NewClient(database.NewInMemoryDocBD(\"myDatabase\"))\n    exchangeRateRepository := entity.NewExchangeRateRepository(dbClient)\n\n    // Create the handler\n    handler := handlers.NewWebServiceExchangeRateHandler(exchangeRateRepository)\n\n    // Register the route and start the server\n    http.HandleFunc(\"/exchange-rate\", handler.ListCurrentExchangeRate)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n</code></pre> <p>In this example, we set up an in-memory database, initialize the repository, create the handler, and register an HTTP route to handle exchange rate requests.</p>"},{"location":"reference/libs/services/infrastructure/server/http/handlers/exchange-rate/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/services/infrastructure/server/http/handlers/exchange-rate/docs/godoc/#handlers","title":"handlers","text":"<pre><code>import \"libs/services/infrastructure/server/http/handlers/exchange-rate\"\n</code></pre>"},{"location":"reference/libs/services/infrastructure/server/http/handlers/exchange-rate/docs/godoc/#index","title":"Index","text":"<ul> <li>type WebServiceExchangeRateHandler</li> <li>func NewWebServiceExchangeRateHandler(exchangeRateRepository entity.ExchangeRateRepositoryInterface) *WebServiceExchangeRateHandler</li> <li>func (h *WebServiceExchangeRateHandler) ListCurrentExchangeRate(w http.ResponseWriter, r *http.Request)</li> </ul>"},{"location":"reference/libs/services/infrastructure/server/http/handlers/exchange-rate/docs/godoc/#type-webserviceexchangeratehandler","title":"type WebServiceExchangeRateHandler","text":"<p>WebServiceExchangeRateHandler handles HTTP requests for exchange rate operations.</p> <pre><code>type WebServiceExchangeRateHandler struct {\n    ExchangeRateRepository entity.ExchangeRateRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/services/infrastructure/server/http/handlers/exchange-rate/docs/godoc/#func-newwebserviceexchangeratehandler","title":"func NewWebServiceExchangeRateHandler","text":"<pre><code>func NewWebServiceExchangeRateHandler(exchangeRateRepository entity.ExchangeRateRepositoryInterface) *WebServiceExchangeRateHandler\n</code></pre> <p>NewWebServiceExchangeRateHandler creates and returns a new WebServiceExchangeRateHandler instance.</p> <p></p>"},{"location":"reference/libs/services/infrastructure/server/http/handlers/exchange-rate/docs/godoc/#func-webserviceexchangeratehandler-listcurrentexchangerate","title":"func (*WebServiceExchangeRateHandler) ListCurrentExchangeRate","text":"<pre><code>func (h *WebServiceExchangeRateHandler) ListCurrentExchangeRate(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListCurrentExchangeRate handles HTTP GET requests to list the current exchange rate. It expects \"code\" and \"code_in\" query parameters, defaulting to \"USD\" and \"BRL\" respectively if not provided.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/","title":"Web Server","text":"<p>The <code>webserver</code> library provides a simple and flexible HTTP server using the Chi router.</p>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/#overview","title":"Overview","text":"<p>The <code>webserver</code> package includes the following main components: - <code>Server</code>: A struct that provides methods to configure and run an HTTP server with middleware and routing support.</p>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/#features","title":"Features","text":"<p>The main functionalities provided by the package include: - Setting up default middleware. - Registering custom middleware. - Adding routes and route groups. - Starting the HTTP server.</p>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/#types","title":"Types","text":"<ul> <li>Server: Represents an HTTP server with a router and address.</li> </ul>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/#functions","title":"Functions","text":""},{"location":"reference/libs/services/infrastructure/server/http/webserver/#server-functions","title":"Server Functions","text":"<ul> <li><code>NewWebServer(addr string) *Server</code>: Creates and returns a new <code>Server</code> instance with the specified address.</li> <li><code>ConfigureDefaults()</code>: Sets up the default middleware for the server.</li> <li><code>RegisterMiddlewares(middlewares ...func(http.Handler) http.Handler)</code>: Adds multiple middlewares to the server.</li> <li><code>RegisterRoute(method, pattern string, handler http.HandlerFunc, group ...string)</code>: Adds a new route with an HTTP method, pattern, and handler function.</li> <li><code>RegisterRouteGroup(prefix string, routes func(r chi.Router))</code>: Registers a group of routes under a common prefix.</li> <li><code>Start() error</code>: Runs the web server on the specified address.</li> </ul>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/#usage","title":"Usage","text":""},{"location":"reference/libs/services/infrastructure/server/http/webserver/#creating-a-new-server","title":"Creating a New Server","text":"<pre><code>import (\n    \"libs/services/infrastructure/server/http/webserver\"\n)\n\nserver := webserver.NewWebServer(\":8080\")\n</code></pre>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/#configuring-default-middleware","title":"Configuring Default Middleware","text":"<pre><code>server.ConfigureDefaults()\n</code></pre>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/#registering-custom-middleware","title":"Registering Custom Middleware","text":"<pre><code>server.RegisterMiddlewares(customMiddleware1, customMiddleware2)\n</code></pre>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/#adding-a-route","title":"Adding a Route","text":"<pre><code>server.RegisterRoute(\"GET\", \"/hello\", func(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"Hello, World!\"))\n})\n</code></pre>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/#adding-a-route-group","title":"Adding a Route Group","text":"<pre><code>server.RegisterRouteGroup(\"/api\", func(r chi.Router) {\n    r.Get(\"/user\", func(w http.ResponseWriter, r *http.Request) {\n        w.Write([]byte(\"User endpoint\"))\n    })\n    r.Post(\"/user\", func(w http.ResponseWriter, r *http.Request) {\n        w.Write([]byte(\"Create user endpoint\"))\n    })\n})\n</code></pre>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/#starting-the-server","title":"Starting the Server","text":"<pre><code>err := server.Start()\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/services/infrastructure/server/http/webserver/docs/godoc/#webserver","title":"webserver","text":"<pre><code>import \"libs/services/infrastructure/server/http/webserver\"\n</code></pre>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/docs/godoc/#index","title":"Index","text":"<ul> <li>type Server</li> <li>func NewWebServer(addr string) *Server</li> <li>func (s *Server) ConfigureDefaults()</li> <li>func (s *Server) RegisterMiddlewares(middlewares ...func(http.Handler) http.Handler)</li> <li>func (s *Server) RegisterRoute(method, pattern string, handler http.HandlerFunc, group ...string)</li> <li>func (s *Server) RegisterRouteGroup(prefix string, routes func(r chi.Router))</li> <li>func (s *Server) Start() error</li> </ul>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/docs/godoc/#type-server","title":"type Server","text":"<p>Server represents an HTTP server with a router and address.</p> <pre><code>type Server struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/docs/godoc/#func-newwebserver","title":"func NewWebServer","text":"<pre><code>func NewWebServer(addr string) *Server\n</code></pre> <p>NewWebServer creates and returns a new Server instance with the specified address.</p> <p></p>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/docs/godoc/#func-server-configuredefaults","title":"func (*Server) ConfigureDefaults","text":"<pre><code>func (s *Server) ConfigureDefaults()\n</code></pre> <p>ConfigureDefaults sets up the default middleware for the server, including request ID, real IP, logger, recoverer, and a timeout of 60 seconds.</p> <p></p>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/docs/godoc/#func-server-registermiddlewares","title":"func (*Server) RegisterMiddlewares","text":"<pre><code>func (s *Server) RegisterMiddlewares(middlewares ...func(http.Handler) http.Handler)\n</code></pre> <p>RegisterMiddlewares adds multiple middlewares to the server.</p> <p></p>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/docs/godoc/#func-server-registerroute","title":"func (*Server) RegisterRoute","text":"<pre><code>func (s *Server) RegisterRoute(method, pattern string, handler http.HandlerFunc, group ...string)\n</code></pre> <p>RegisterRoute adds a new route with an HTTP method, pattern, and handler function. If a group is specified, the route is added to that group.</p> <p></p>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/docs/godoc/#func-server-registerroutegroup","title":"func (*Server) RegisterRouteGroup","text":"<pre><code>func (s *Server) RegisterRouteGroup(prefix string, routes func(r chi.Router))\n</code></pre> <p>RegisterRouteGroup registers a group of routes under a common prefix.</p> <p></p>"},{"location":"reference/libs/services/infrastructure/server/http/webserver/docs/godoc/#func-server-start","title":"func (*Server) Start","text":"<pre><code>func (s *Server) Start() error\n</code></pre> <p>Start runs the web server on the specified address.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/services/usecases/exchange-rate/","title":"Exchange Rate Use Cases","text":"<p>The <code>exchange-rate</code> library provides use cases for handling exchange rate operations, including fetching and saving exchange rates.</p>"},{"location":"reference/libs/services/usecases/exchange-rate/#overview","title":"Overview","text":"<p>This package includes the following main components: - <code>GetExchangeRateUseCase</code>: A struct that provides methods to fetch exchange rates from an external API, save them to a repository, and return the exchange rate data. - <code>GenerateExchangeRateSearchKey</code>: A function that generates a search key for the exchange rate by concatenating and uppercasing the currency codes.</p>"},{"location":"reference/libs/services/usecases/exchange-rate/#features","title":"Features","text":"<p>The main functionalities provided by the package include: - Fetching exchange rates from an external API. - Saving exchange rates to a repository. - Generating a search key for exchange rates.</p>"},{"location":"reference/libs/services/usecases/exchange-rate/#types","title":"Types","text":"<ul> <li>GetExchangeRateUseCase: Represents a use case for fetching and saving exchange rates.</li> </ul>"},{"location":"reference/libs/services/usecases/exchange-rate/#functions","title":"Functions","text":""},{"location":"reference/libs/services/usecases/exchange-rate/#getexchangerateusecase-functions","title":"GetExchangeRateUseCase Functions","text":"<ul> <li><code>NewGetExchangeRateUseCase(repository entity.ExchangeRateRepositoryInterface) *GetExchangeRateUseCase</code>: Creates and returns a new <code>GetExchangeRateUseCase</code> instance.</li> <li><code>Execute(code, codeIn string) (outputDTO.ExchangeRatesDTO, error)</code>: Fetches the exchange rate for the given currency codes, saves it to the repository, and returns the exchange rate data.</li> </ul>"},{"location":"reference/libs/services/usecases/exchange-rate/#utility-functions","title":"Utility Functions","text":"<ul> <li><code>GenerateExchangeRateSearchKey(code, codeIn string) string</code>: Generates a search key for the exchange rate by concatenating and uppercasing the currency codes.</li> </ul>"},{"location":"reference/libs/services/usecases/exchange-rate/#usage","title":"Usage","text":""},{"location":"reference/libs/services/usecases/exchange-rate/#creating-a-new-use-case","title":"Creating a New Use Case","text":"<pre><code>exchangeRateRepository := // initialize your ExchangeRateRepository\nuseCase := usecases.NewGetExchangeRateUseCase(exchangeRateRepository)\n</code></pre>"},{"location":"reference/libs/services/usecases/exchange-rate/#executing-the-use-case","title":"Executing the Use Case","text":"<pre><code>code := \"USD\"\ncodeIn := \"BRL\"\n\nexchangeRates, err := useCase.Execute(code, codeIn)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Println(exchangeRates)\n</code></pre>"},{"location":"reference/libs/services/usecases/exchange-rate/#full-example","title":"Full Example","text":"<p>Here is a complete example demonstrating the setup and use of the usecases package in a simple application:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/external-clients/economia-awesome-api/client\"\n    \"libs/resources/database/in-memory/go-doc-db-client/client\"\n    \"libs/resources/database/in-memory/go-doc-db/database\"\n    \"libs/services/acl/dtos/exchange-rate/output\"\n    \"libs/services/entities/exchange-rate/entity\"\n    \"libs/services/usecases/exchange-rate/usecases\"\n)\n\nfunc main() {\n    // Initialize the in-memory database and repository\n    dbClient := client.NewClient(database.NewInMemoryDocBD(\"myDatabase\"))\n    exchangeRateRepository := entity.NewExchangeRateRepository(dbClient)\n\n    // Create the use case\n    useCase := usecases.NewGetExchangeRateUseCase(exchangeRateRepository)\n\n    // Execute the use case to get exchange rates\n    code := \"USD\"\n    codeIn := \"BRL\"\n\n    exchangeRates, err := useCase.Execute(code, codeIn)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Print the exchange rates\n    fmt.Println(exchangeRates)\n}\n</code></pre> <p>In this example, we initialize an in-memory database, create an exchange rate repository, set up the use case for fetching exchange rates, and execute the use case to retrieve and print the exchange rates.</p>"},{"location":"reference/libs/services/usecases/exchange-rate/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/services/usecases/exchange-rate/docs/godoc/#usecases","title":"usecases","text":"<pre><code>import \"libs/services/usecases/exchange-rate/usecases\"\n</code></pre>"},{"location":"reference/libs/services/usecases/exchange-rate/docs/godoc/#index","title":"Index","text":"<ul> <li>func GenerateExchangeRateSearchKey(code, codeIn string) string</li> <li>type GetExchangeRateUseCase</li> <li>func NewGetExchangeRateUseCase(repository entity.ExchangeRateRepositoryInterface) *GetExchangeRateUseCase</li> <li>func (u *GetExchangeRateUseCase) Execute(code, codeIn string) (outputDTO.ExchangeRatesDTO, error)</li> </ul>"},{"location":"reference/libs/services/usecases/exchange-rate/docs/godoc/#func-generateexchangeratesearchkey","title":"func GenerateExchangeRateSearchKey","text":"<pre><code>func GenerateExchangeRateSearchKey(code, codeIn string) string\n</code></pre> <p>GenerateExchangeRateSearchKey generates a search key for the exchange rate by concatenating and uppercasing the currency codes.</p> <p></p>"},{"location":"reference/libs/services/usecases/exchange-rate/docs/godoc/#type-getexchangerateusecase","title":"type GetExchangeRateUseCase","text":"<p>GetExchangeRateUseCase represents a use case for fetching and saving exchange rates.</p> <pre><code>type GetExchangeRateUseCase struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/services/usecases/exchange-rate/docs/godoc/#func-newgetexchangerateusecase","title":"func NewGetExchangeRateUseCase","text":"<pre><code>func NewGetExchangeRateUseCase(repository entity.ExchangeRateRepositoryInterface) *GetExchangeRateUseCase\n</code></pre> <p>NewGetExchangeRateUseCase creates and returns a new GetExchangeRateUseCase instance.</p> <p></p>"},{"location":"reference/libs/services/usecases/exchange-rate/docs/godoc/#func-getexchangerateusecase-execute","title":"func (*GetExchangeRateUseCase) Execute","text":"<pre><code>func (u *GetExchangeRateUseCase) Execute(code, codeIn string) (outputDTO.ExchangeRatesDTO, error)\n</code></pre> <p>Execute fetches the exchange rate for the given currency codes, saves it to the repository, and returns the exchange rate data.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/shared/go-request/","title":"go-request","text":"<p><code>go-request</code> is a lightweight and flexible HTTP client for Go. It allows you to create and send HTTP requests with ease, providing support for various content types and custom headers.</p>"},{"location":"reference/libs/shared/go-request/#features","title":"Features","text":"<ul> <li>Build and send HTTP requests with custom headers, path parameters, and query parameters.</li> <li>Support for JSON, XML, and URL-encoded form bodies.</li> <li>Timeout handling for HTTP requests.</li> <li>Easy-to-use API with context support for request cancellation.</li> </ul>"},{"location":"reference/libs/shared/go-request/#usage","title":"Usage","text":"<p>Here's an example of how to use the <code>go-request</code> package to send an HTTP request:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"net/http\"\n    \"time\"\n\n    gorequest \"libs/shared/go-request\"\n)\n\nfunc main() {\n    client := &amp;http.Client{}\n    ctx := context.Background()\n\n    headers := map[string]string{\n        \"Content-Type\": \"application/json\",\n    }\n\n    queryParams := map[string]string{\n        \"query\": \"value\",\n    }\n\n    body := map[string]interface{}{\n        \"key\": \"value\",\n    }\n\n    req, err := gorequest.CreateRequest(ctx, \"https://api.example.com\", nil, queryParams, body, headers, \"POST\")\n    if err != nil {\n        fmt.Printf(\"Failed to create request: %v\\n\", err)\n        return\n    }\n\n    var result map[string]interface{}\n    err = gorequest.SendRequest(ctx, req, client, &amp;result, 10*time.Second)\n    if err != nil {\n        fmt.Printf(\"Failed to send request: %v\\n\", err)\n        return\n    }\n\n    fmt.Printf(\"Response: %+v\\n\", result)\n}\n</code></pre>"},{"location":"reference/libs/shared/go-request/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/shared/go-request/docs/godoc/#gorequest","title":"gorequest","text":"<pre><code>import \"libs/shared/go-request\"\n</code></pre>"},{"location":"reference/libs/shared/go-request/docs/godoc/#index","title":"Index","text":"<ul> <li>func CreateRequest(ctx context.Context, baseUrl string, pathParams []string, queryParams map[string]string, body interface{}, headers map[string]string, method string) (*http.Request, error)</li> <li>func SendRequest(ctx context.Context, req *http.Request, client *http.Client, result interface{}, timeout time.Duration) error</li> </ul>"},{"location":"reference/libs/shared/go-request/docs/godoc/#func-createrequest","title":"func CreateRequest","text":"<pre><code>func CreateRequest(ctx context.Context, baseUrl string, pathParams []string, queryParams map[string]string, body interface{}, headers map[string]string, method string) (*http.Request, error)\n</code></pre> <p>CreateRequest creates an HTTP request with the given parameters. It builds the URL, marshals the body, and sets the headers. Returns the constructed *http.Request or an error.</p> <p></p>"},{"location":"reference/libs/shared/go-request/docs/godoc/#func-sendrequest","title":"func SendRequest","text":"<pre><code>func SendRequest(ctx context.Context, req *http.Request, client *http.Client, result interface{}, timeout time.Duration) error\n</code></pre> <p>SendRequest sends the given HTTP request using the provided client. It waits for the response or times out after the specified duration. The response body is decoded into the result parameter. Returns an error if the request fails, times out, or the response status is not 2xx.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/shared/go-uuid/","title":"go-uuid","text":"<p><code>go-uuid</code> is a Go package designed to generate unique identifiers (UUIDs) based on provided properties. This package serializes properties to JSON, hashes the resulting byte slice, and generates a UUID from the hash.</p>"},{"location":"reference/libs/shared/go-uuid/#usage","title":"Usage","text":"<p>Here's a basic example of how to use the <code>go-uuid</code> package to generate a unique ID:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    gouuid \"libs/shared/go-uuid\"\n)\n\nfunc main() {\n    properties := map[string]interface{}{\n        \"name\": \"example\",\n        \"value\": 12345,\n    }\n\n    id, err := gouuid.GetID(properties)\n    if err != nil {\n        log.Fatalf(\"Error generating ID: %v\", err)\n    }\n\n    fmt.Printf(\"Generated ID: %s\\n\", id)\n}\n</code></pre>"},{"location":"reference/libs/shared/go-uuid/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/shared/go-uuid/docs/godoc/#gouuid","title":"gouuid","text":"<pre><code>import \"libs/shared/go-uuid\"\n</code></pre>"},{"location":"reference/libs/shared/go-uuid/docs/godoc/#index","title":"Index","text":"<ul> <li>func GetID(properties map[string]interface{}) (string, error)</li> <li>type ID</li> </ul>"},{"location":"reference/libs/shared/go-uuid/docs/godoc/#func-getid","title":"func GetID","text":"<pre><code>func GetID(properties map[string]interface{}) (string, error)\n</code></pre> <p>GetID generates a unique ID based on the provided properties. It serializes the properties to JSON, hashes the resulting byte slice, and generates a UUID from the hash. Returns the generated ID and any error encountered during the process.</p> <p></p>"},{"location":"reference/libs/shared/go-uuid/docs/godoc/#type-id","title":"type ID","text":"<p>ID is a unique identifier generated based on the provided properties.</p> <pre><code>type ID = string\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/services/exchange-rate/","title":"Exchsnge Rate API","text":""}]}