{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"summary/","title":"Summary","text":"<ul> <li>Architecture</li> <li>Services</li> <li>Libraries</li> <li>Dependency Graph</li> </ul>"},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/","title":"economia-awesome-api","text":"<p>This library provides Data Transfer Objects (DTOs) for handling <code>economia-awesome-api</code> information in a Go project. It defines structures for output data formats.</p>"},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/#packages","title":"Packages","text":""},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/#output","title":"output","text":"<p>The <code>output</code> package is designed to facilitate the transfer of data between different layers of an application, ensuring a clear and consistent structure for currency information from <code>economia-awesome-api</code> in output context.</p>"},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/#usage","title":"Usage","text":""},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/#currencyinfodto","title":"CurrencyInfoDTO","text":"<p>The <code>CurrencyInfoDTO</code> struct contains detailed information about an exchange rate. Each field is mapped to a JSON key, allowing easy serialization and deserialization.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    outputDTO \"libs/services/acl/dtos/economia-awesome-api/output\"\n)\n\nfunc main() {\n    currencyInfo := outputDTO.CurrencyInfoDTO{\n        Code:       \"USD\",\n        CodeIn:     \"BRL\",\n        Name:       \"Dollar\",\n        High:       \"5.30\",\n        Low:        \"5.20\",\n        VarBid:     \"0.05\",\n        PctChange:  \"0.95\",\n        Bid:        \"5.25\",\n        Ask:        \"5.26\",\n        Timestamp:  \"1625164800\",\n        CreateDate: \"2021-07-01T12:00:00Z\",\n    }\n    fmt.Printf(\"%+v\\n\", currencyInfo)\n}\n</code></pre>"},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/#currencyinfomapdto","title":"CurrencyInfoMapDTO","text":"<p>The <code>CurrencyInfoMapDTO</code> is a map where the keys are currency codes and the values are <code>CurrencyInfoDTO</code> objects. This structure is useful for storing and retrieving exchange rate information for multiple currencies.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    outputDTO \"libs/services/acl/dtos/economia-awesome-api/output\"\n)\n\nfunc main() {\n    currencyInfoMap := outputDTO.CurrencyInfoMapDTO{\n        \"USDBRL\": outputDTO.CurrencyInfoDTO{\n            Code:       \"USD\",\n            CodeIn:     \"BRL\",\n            Name:       \"Dollar\",\n            High:       \"5.30\",\n            Low:        \"5.20\",\n            VarBid:     \"0.05\",\n            PctChange:  \"0.95\",\n            Bid:        \"5.25\",\n            Ask:        \"5.26\",\n            Timestamp:  \"1625164800\",\n            CreateDate: \"2021-07-01T12:00:00Z\",\n        },\n        \"EURBRL\": outputDTO.CurrencyInfoDTO{\n            Code:       \"EUR\",\n            CodeIn:     \"BRL\",\n            Name:       \"Euro\",\n            High:       \"6.20\",\n            Low:        \"6.10\",\n            VarBid:     \"0.03\",\n            PctChange:  \"0.50\",\n            Bid:        \"6.15\",\n            Ask:        \"6.16\",\n            Timestamp:  \"1625164800\",\n            CreateDate: \"2021-07-01T12:00:00Z\",\n        },\n    }\n    fmt.Printf(\"%+v\\n\", currencyInfoMap)\n}\n</code></pre>"},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/docs/godoc/#outputdto","title":"outputdto","text":"<pre><code>import \"libs/services/acl/dtos/economia-awesome-api/output\"\n</code></pre>"},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/docs/godoc/#index","title":"Index","text":"<ul> <li>type CurrencyInfoDTO</li> <li>type CurrencyInfoMapDTO</li> </ul>"},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/docs/godoc/#type-currencyinfodto","title":"type CurrencyInfoDTO","text":"<p>CurrencyInfoDTO contains detailed information about the exchange rate.</p> <pre><code>type CurrencyInfoDTO struct {\n    Code       string `json:\"code\"`\n    CodeIn     string `json:\"codein\"`\n    Name       string `json:\"name\"`\n    High       string `json:\"high\"`\n    Low        string `json:\"low\"`\n    VarBid     string `json:\"varBid\"`\n    PctChange  string `json:\"pctChange\"`\n    Bid        string `json:\"bid\"`\n    Ask        string `json:\"ask\"`\n    Timestamp  string `json:\"timestamp\"`\n    CreateDate string `json:\"create_date\"`\n}\n</code></pre> <p></p>"},{"location":"reference/libs/services/acl/dtos/economia-awesome-api/docs/godoc/#type-currencyinfomapdto","title":"type CurrencyInfoMapDTO","text":"<p>CurrencyInfoMapDTO is a map of currency codes to CurrencyInfo.</p> <pre><code>type CurrencyInfoMapDTO map[string]CurrencyInfoDTO\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/","title":"exchange-rate","text":"<p>This library provides Data Transfer Objects (DTOs) for handling exchange rate information in a Go project. It defines structures for both input and output data formats.</p>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/#packages","title":"Packages","text":""},{"location":"reference/libs/services/acl/dtos/exchange-rate/#input","title":"input","text":"<p>The <code>input</code> package is designed to facilitate the transfer of data between different layers of an application, ensuring a clear and consistent structure for currency information from <code>exchange-rate</code> api in input context.</p>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/#output","title":"output","text":"<p>The <code>output</code> package is designed to facilitate the transfer of data between different layers of an application, ensuring a clear and consistent structure for currency information from <code>exchange-rate</code> api in input context.</p>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/#usage","title":"Usage","text":"<p>Here's an example of how to use the DTOs in your application:</p>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/#input_1","title":"Input","text":"<pre><code>import (\n    inputDTO \"libs/services/acl/dtos/exchange-rate/input\"\n)\n\nfunc processInput(data inputDTO.ExchangeRateDTO) {\n    // Process the input data\n    fmt.Println(data.Name)\n}\n</code></pre>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/#output_1","title":"Output","text":"<pre><code>import (\n    outputDTO \"libs/services/acl/dtos/exchange-rate/output\"\n)\n\nfunc generateOutput() outputdto.ExchangeRateDTO {\n    return outputdto.ExchangeRateDTO{\n        Code:       \"USD\",\n        CodeIn:     \"BRL\",\n        Name:       \"Dollar\",\n        High:       5.40,\n        Low:        5.20,\n        VarBid:     0.02,\n        PctChange:  0.37,\n        Bid:        5.30,\n        Ask:        5.32,\n        Timestamp:  1612300800,\n        CreateDate: \"2024-05-21\",\n    }\n}\n\nfunc displayOutput(data outputdto.ExchangeRatesDTO) {\n    for _, rate := range data {\n        fmt.Printf(\"Currency: %s, Bid: %f, Ask: %f\\n\", rate.Name, rate.Bid, rate.Ask)\n    }\n}\n</code></pre>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/services/acl/dtos/exchange-rate/docs/godoc/#inputdto","title":"inputdto","text":"<pre><code>import \"libs/services/acl/dtos/exchange-rate/input\"\n</code></pre>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/docs/godoc/#index","title":"Index","text":"<ul> <li>type ExchangeRateDTO</li> </ul>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/docs/godoc/#type-exchangeratedto","title":"type ExchangeRateDTO","text":"<p>ExchangeRateDTO is a data transfer object that represents the exchange rate api input.</p> <pre><code>type ExchangeRateDTO struct {\n    Name string `json:\"name\"`\n}\n</code></pre>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/docs/godoc/#outputdto","title":"outputdto","text":"<pre><code>import \"libs/services/acl/dtos/exchange-rate/output\"\n</code></pre>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/docs/godoc/#index_1","title":"Index","text":"<ul> <li>type ExchangeRateDTO</li> <li>type ExchangeRatesDTO</li> </ul>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/docs/godoc/#type-exchangeratedto_1","title":"type ExchangeRateDTO","text":"<p>ExchangeRateDTO is a data transfer object that represents the exchange rate api output.</p> <pre><code>type ExchangeRateDTO struct {\n    Code       string  `json:\"code\"`\n    CodeIn     string  `json:\"codein\"`\n    Name       string  `json:\"name\"`\n    High       float64 `json:\"high\"`\n    Low        float64 `json:\"low\"`\n    VarBid     float64 `json:\"varBid\"`\n    PctChange  float64 `json:\"pctChange\"`\n    Bid        float64 `json:\"bid\"`\n    Ask        float64 `json:\"ask\"`\n    Timestamp  int64   `json:\"timestamp\"`\n    CreateDate string  `json:\"create_date\"`\n}\n</code></pre> <p></p>"},{"location":"reference/libs/services/acl/dtos/exchange-rate/docs/godoc/#type-exchangeratesdto","title":"type ExchangeRatesDTO","text":"<p>ExchangeRatesDTO is a data transfer object that represents a map of exchange rates.</p> <pre><code>type ExchangeRatesDTO map[string]ExchangeRateDTO\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#exchangerateentity","title":"exchangerateentity","text":"<pre><code>import \"libs/services/entities/exchange-rate/entity\"\n</code></pre>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#index","title":"Index","text":"<ul> <li>func StringToFloat64(s string) (float64, error)</li> <li>func StringToInt64(s string) (int64, error)</li> <li>type CurrencyInfo</li> <li>func MapToCurrencyInfoEntity(document map[string]interface{}) (*CurrencyInfo, error)</li> <li>func NewExchangeRate(code string, codeIn string, name string, high string, low string, varBid string, pctChange string, bid string, ask string, timestamp string, createDate string) (*CurrencyInfo, error)</li> <li>func (e *CurrencyInfo) ToMap() map[string]interface{}</li> <li>type ExchangeRateRepositoryInterface</li> </ul>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#func-stringtofloat64","title":"func StringToFloat64","text":"<pre><code>func StringToFloat64(s string) (float64, error)\n</code></pre> <p>StringToFloat64 converts a string to a float64. It returns the float64 value and an error if the conversion fails.</p> <p></p>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#func-stringtoint64","title":"func StringToInt64","text":"<pre><code>func StringToInt64(s string) (int64, error)\n</code></pre> <p>StringToInt64 converts a string to an int64. It returns the int64 value and an error if the conversion fails.</p> <p></p>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#type-currencyinfo","title":"type CurrencyInfo","text":"<p>CurrencyInfo represents the exchange rate information for a currency pair.</p> <pre><code>type CurrencyInfo struct {\n    ID         gouuid.ID `json:\"_id\"`\n    Code       string    `json:\"code\"`\n    CodeIn     string    `json:\"codeIn\"`\n    Name       string    `json:\"name\"`\n    High       float64   `json:\"high\"`\n    Low        float64   `json:\"low\"`\n    VarBid     float64   `json:\"varBid\"`\n    PctChange  float64   `json:\"pctChange\"`\n    Bid        float64   `json:\"bid\"`\n    Ask        float64   `json:\"ask\"`\n    Timestamp  int64     `json:\"timestamp\"`\n    CreateDate time.Time `json:\"create_date\"`\n}\n</code></pre> <p></p>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#func-maptocurrencyinfoentity","title":"func MapToCurrencyInfoEntity","text":"<pre><code>func MapToCurrencyInfoEntity(document map[string]interface{}) (*CurrencyInfo, error)\n</code></pre> <p>MapToCurrencyInfoEntity converts a map representation of a CurrencyInfo object back to a CurrencyInfo entity.</p> <p></p>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#func-newexchangerate","title":"func NewExchangeRate","text":"<pre><code>func NewExchangeRate(code string, codeIn string, name string, high string, low string, varBid string, pctChange string, bid string, ask string, timestamp string, createDate string) (*CurrencyInfo, error)\n</code></pre> <p>NewExchangeRate creates a new CurrencyInfo entity from string inputs. It converts string inputs to appropriate data types, validates them, and initializes a new CurrencyInfo object.</p> <p></p>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#func-currencyinfo-tomap","title":"func (*CurrencyInfo) ToMap","text":"<pre><code>func (e *CurrencyInfo) ToMap() map[string]interface{}\n</code></pre> <p>ToMap converts the CurrencyInfo object to a map representation.</p> <p></p>"},{"location":"reference/libs/services/entities/exchange-rate/docs/godoc/#type-exchangeraterepositoryinterface","title":"type ExchangeRateRepositoryInterface","text":"<p>ExchangeRateRepositoryInterface defines the methods that any repository implementation of CurrencyInfo must implement.</p> <pre><code>type ExchangeRateRepositoryInterface interface {\n    Save(currencyInfo *CurrencyInfo) error\n    FindAll() ([]*CurrencyInfo, error)\n    Find(code string, codeIn string) ([]*CurrencyInfo, error)\n    FindByID(id string) (*CurrencyInfo, error)\n    Delete(id string) error\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/shared/go-request/","title":"go-request","text":"<p><code>go-request</code> is a lightweight and flexible HTTP client for Go. It allows you to create and send HTTP requests with ease, providing support for various content types and custom headers.</p>"},{"location":"reference/libs/shared/go-request/#features","title":"Features","text":"<ul> <li>Build and send HTTP requests with custom headers, path parameters, and query parameters.</li> <li>Support for JSON, XML, and URL-encoded form bodies.</li> <li>Timeout handling for HTTP requests.</li> <li>Easy-to-use API with context support for request cancellation.</li> </ul>"},{"location":"reference/libs/shared/go-request/#usage","title":"Usage","text":"<p>Here's an example of how to use the <code>go-request</code> package to send an HTTP request:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"net/http\"\n    \"time\"\n\n    gorequest \"libs/shared/go-request\"\n)\n\nfunc main() {\n    client := &amp;http.Client{}\n    ctx := context.Background()\n\n    headers := map[string]string{\n        \"Content-Type\": \"application/json\",\n    }\n\n    queryParams := map[string]string{\n        \"query\": \"value\",\n    }\n\n    body := map[string]interface{}{\n        \"key\": \"value\",\n    }\n\n    req, err := gorequest.CreateRequest(ctx, \"https://api.example.com\", nil, queryParams, body, headers, \"POST\")\n    if err != nil {\n        fmt.Printf(\"Failed to create request: %v\\n\", err)\n        return\n    }\n\n    var result map[string]interface{}\n    err = gorequest.SendRequest(ctx, req, client, &amp;result, 10*time.Second)\n    if err != nil {\n        fmt.Printf(\"Failed to send request: %v\\n\", err)\n        return\n    }\n\n    fmt.Printf(\"Response: %+v\\n\", result)\n}\n</code></pre>"},{"location":"reference/libs/shared/go-request/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/shared/go-request/docs/godoc/#gorequest","title":"gorequest","text":"<pre><code>import \"libs/shared/go-request\"\n</code></pre>"},{"location":"reference/libs/shared/go-request/docs/godoc/#index","title":"Index","text":"<ul> <li>func CreateRequest(ctx context.Context, baseUrl string, pathParams []string, queryParams map[string]string, body interface{}, headers map[string]string, method string) (*http.Request, error)</li> <li>func SendRequest(ctx context.Context, req *http.Request, client *http.Client, result interface{}, timeout time.Duration) error</li> </ul>"},{"location":"reference/libs/shared/go-request/docs/godoc/#func-createrequest","title":"func CreateRequest","text":"<pre><code>func CreateRequest(ctx context.Context, baseUrl string, pathParams []string, queryParams map[string]string, body interface{}, headers map[string]string, method string) (*http.Request, error)\n</code></pre> <p>CreateRequest creates an HTTP request with the given parameters. It builds the URL, marshals the body, and sets the headers. Returns the constructed *http.Request or an error.</p> <p></p>"},{"location":"reference/libs/shared/go-request/docs/godoc/#func-sendrequest","title":"func SendRequest","text":"<pre><code>func SendRequest(ctx context.Context, req *http.Request, client *http.Client, result interface{}, timeout time.Duration) error\n</code></pre> <p>SendRequest sends the given HTTP request using the provided client. It waits for the response or times out after the specified duration. The response body is decoded into the result parameter. Returns an error if the request fails, times out, or the response status is not 2xx.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/shared/go-uuid/","title":"go-uuid","text":"<p><code>go-uuid</code> is a Go package designed to generate unique identifiers (UUIDs) based on provided properties. This package serializes properties to JSON, hashes the resulting byte slice, and generates a UUID from the hash.</p>"},{"location":"reference/libs/shared/go-uuid/#usage","title":"Usage","text":"<p>Here's a basic example of how to use the <code>go-uuid</code> package to generate a unique ID:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    gouuid \"libs/shared/go-uuid\"\n)\n\nfunc main() {\n    properties := map[string]interface{}{\n        \"name\": \"example\",\n        \"value\": 12345,\n    }\n\n    id, err := gouuid.GetID(properties)\n    if err != nil {\n        log.Fatalf(\"Error generating ID: %v\", err)\n    }\n\n    fmt.Printf(\"Generated ID: %s\\n\", id)\n}\n</code></pre>"},{"location":"reference/libs/shared/go-uuid/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/shared/go-uuid/docs/godoc/#gouuid","title":"gouuid","text":"<pre><code>import \"libs/shared/go-uuid\"\n</code></pre>"},{"location":"reference/libs/shared/go-uuid/docs/godoc/#index","title":"Index","text":"<ul> <li>func GetID(properties map[string]interface{}) (string, error)</li> <li>type ID</li> </ul>"},{"location":"reference/libs/shared/go-uuid/docs/godoc/#func-getid","title":"func GetID","text":"<pre><code>func GetID(properties map[string]interface{}) (string, error)\n</code></pre> <p>GetID generates a unique ID based on the provided properties. It serializes the properties to JSON, hashes the resulting byte slice, and generates a UUID from the hash. Returns the generated ID and any error encountered during the process.</p> <p></p>"},{"location":"reference/libs/shared/go-uuid/docs/godoc/#type-id","title":"type ID","text":"<p>ID is a unique identifier generated based on the provided properties.</p> <pre><code>type ID = string\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/services/exchange-rate/","title":"Exchsnge Rate API","text":""}]}